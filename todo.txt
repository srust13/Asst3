create "read_line" function for files

    char *project = malloc(strlen(conn->data)+1);
    strcpy(project, conn->data);


/**
 * Reads chunks from fd until a newline is read.
 * Any bytes left in the chunk after the newline
 * was reached are placed in "remaining".
 * The newline is replaced with a null byte.
 *
 * Note:
 * It is possible that this function doesn't read from
 * the fd at all. This occurs if there is existing data in
 * the "remaining" already satisfies the exit condition.
 */
void read_line(file_buf_t *conn){

    // copy leftover data from "remaining" into "data"
    memcpy(conn->data, conn->remaining, conn->remaining_size);
    int data_size = conn->remaining_size;
    conn->remaining_size = 0;

    // check if exit condition reached already
    int i;
    for (i = 0; i < data_size; i++){
        if (conn->data[i] == '\n'){
            conn->data[i] = '\0';
            conn->remaining_size = data_size-i-1;
            memcpy(conn->remaining, conn->data+i+1, conn->remaining_size);
            return;
        }
    }

    // read chunks from fd until exit condition is reached
    char *temp = malloc(CHUNK_SIZE);
    while (1){
        int bytes_read = read(conn->sock, temp, CHUNK_SIZE);

        // ensure that data buffer has enough space
        if (data_size + bytes_read > conn->data_buf_size){
            conn->data_buf_size *= 2;
            char *new_buf = realloc(conn->data, conn->data_buf_size);
            if (new_buf == NULL) {
                puts("Memory allocation failed");
                free(temp);
                free(conn->data);
                free(conn->remaining);
                exit(EXIT_FAILURE);
            }
            conn->data = new_buf;
        }

        int i;
        for (i = 0; i < bytes_read; i++) {
            // copy temp to buf one byte at a time
            conn->data[data_size++] = temp[i];

            // check exit conditions
            if (conn->data[data_size-1] == '\n'){
                conn->data[data_size-1] = '\0';
                conn->remaining_size = bytes_read-i-1;
                memcpy(conn->remaining, temp+i+1, conn->remaining_size);
                free(temp);
                return;
            }
        }
    }
}
